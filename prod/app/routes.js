angular.module("templateMaker").config(["$routeProvider", function ($routeProvider) {
        $routeProvider
            .when('/login', {
            template: "<style type=\"text/css\">\n    body { background-color: #DADADA; background-image: url(assets/bg.png); background-repeat:no-repeat; background-position: top right;}\n    body > .grid { height: 100% !important;  }\n    #app_body {height:100%;}\n    .image {margin-top: -100px;}\n    .column { max-width: 450px;}\n    ng-view{height:100%;}\n  </style><div class=\"ui middle aligned center aligned grid\" style=\"height: 100%;\">\n  <div class=\"column\">\n    <h2 class=\"ui purple centered image header\">\n      <img class=\"ui image\" src=\"assets/logo128.png\"/>\n      <div class=\"content\">\n      {{ SecureGateway.loginTimer ? \"Logging you in to Template Maker ...\" : \"Template Maker\"}}\n      <div class=\"sub header\">Version {{appVersion}}</div>\n      </div>\n    </h2>\n    <form class=\"ui large form\">\n      <div>\n        <div class=\"field\">\n          <div class=\"ui left icon input\" ng-class=\"{disabled: SecureGateway.loginTimer}\">\n            <i class=\"user icon\"></i>\n\n            <input type=\"text\" placeholder=\"Enter your email address\" ng-model=\"SecureGateway.sessionUserEmail\" >\n\n          </div>\n        </div>\n        <i class=\"circular help icon link\" ui-popup popup-id=\"help-popup\"></i>\n        <div class=\"ui large purple button\" ng-if=\"!SecureGateway.loginTimer\" ng-click=\"SecureGateway.sessionUpdateUserEmail()\">Login</div>\n        <div class=\"ui large purple button\" ng-if=\"SecureGateway.loginTimer\" ng-click=\"SecureGateway.loginAsOther()\">Cancel login</div>\n        <div class=\"ui small inline loader\" ng-class=\"{active: SecureGateway.loginTimer}\"></div>\n\n\n\n      </div>\n\n      <div class=\"ui red message\" ng-if=\"SecureGateway.errorMessage\">{{SecureGateway.errorMessage}}</div>\n      <div class=\"ui popup hidden\" id=\"help-popup\" ng-if=\"!SecureGateway.loginTimer\" style=\"text-align: left;\">\n      <div class=\"header\">Great news: You do not need a password.</div>\n      <div class=\"content\" style=\"width: 330px;\">\n\n         However, you will have to provide a valid email address before using Template Maker. You should only need to do this one time; Your email address will be stored in your browser and used to log you in next time. If you clear your cache or your browser loses your saved email address, you will need to input it again. Your email address is not tracked or saved in Google Analytics, a hash is generated and identifies you as a single user across browsers and dynamic IP Addresses.\n        </div>\n        </div>\n    </form>\n\n\n  </div>\n</div>"
        })
            .when('/offline', {
            template: "\n  <a href=\"javascript:history.back()\"><i class=\"arrow left icon\"></i> Go back</a>\n        <h1>Using Template Maker offline (BETA)</h1>\n        <p>Let's face it. Template Maker has had some down time.\n        And, it was difficult to come up with a perfect solution, but this new feature is very close.</p>\n\n        <h2>What you need to do:</h2>\n        <p>You'll want to download the zip file, extract its contents into a safe folder on your computer.</p>\n\n        <p>You bookmark that file on your computer, in your browser. The offline version of Template Maker has the right\n        equipment to run directly from your machine without accessing the online version.</p>\n\n        <p>BUT, the best version is always the most up-to-date; so, what the offline version will do: it will ping the online version and see if it can access it.\n        If it can access the online version it will redirect you there. So, everyone wins.</p>\n\n        <p>If you have the \"old version\" of Template Maker saved locally on your computer, Template Maker will tell you the next time you access the online version that there is a new version available,\n        and you'll simply need to overwrite the file you downloaded on your computer with a new one.</p>\n\n        <div ng-if=\"!accessingFromOffline\"><a href=\"prod/single/Template_Maker_Offline.zip\" class=\"ui primary compact button\" ><i class=\"file archive outline icon\"></i>Install Now</a></div>\n        <div ng-if=\"update_version\" ><a href=\"prod/single/Template_Maker_Offline.zip\" class=\"ui primary compact button\" ><i class=\"file archive outline icon\"></i>Update Now</a></div>\n  "
        })
            .when('/main', {
            template: "\n    <div class=\"ui icon message\" ng-if=\"!accessingFromOffline\">\n    <i class=\"info circle icon\"></i>\n\n    <div class=\"content\">\n    <div class=\"header\">You can now use Template Maker offline. (BETA)</div>\n      Get Template Maker now with (hopefully) ZERO downtime.\n      <a href=\"#/offline\">Learn more <i class=\"arrow right icon\"></i></a>\n      </div>\n      </div>\n\n    <div class=\"ui warning icon message\" ng-if=\"update_version&&update_forced\" style=\"align-items:flex-start;\">\n    <i class=\"warning sign icon\"></i>\n      <div class=\"content\">\n      <div class=\"header\">Update to version {{onlineVersion}}.</div>\n      It looks like you are using version {{offlineVersion}} of Template Maker offline. If you'd like to use the most up to date version and make this message go away, you should download the latest version today.\n      <div style=\"padding-top:.5em;\">\n      <a href=\"prod/single/Template_Maker_Offline.zip\" target=\"_blank\" class=\"ui primary compact button\" ><i class=\"file archive outline icon\"></i>Update Now</a>\n      </div>\n      </div>\n    </div>\n\n    <h1>{{Workspace.templateList.length==0 ? \"Drag in your templates\" : \"Templates\"}}</h1>\n    <div>\n    <div ng-show=\"Workspace.templateList.length>0\">\n    <div class=\"ui relaxed divided list\">\n      <div class=\"item\" ng-repeat=\"(key, item) in Workspace.templateList track by $index\">\n        <i class=\"large file outline middle aligned icon\"></i>\n        <div class=\"content\">\n          <div class=\"header\">{{item.name}}</div>\n          <div class=\"description\">{{item.size}}</div>\n        </div>\n      </div>\n    </div>\n    </div>\n\n    <file-dropper ng-show=\"Workspace.templateList.length==0\" ondrop=\"Workspace.importTemplateFiles(evt)\" label=\"Drop files here\"></file-dropper>\n<br>\n\n\n    <div class=\"ui fixed container\">\n      <div class=\"ui container\">\n        <button class=\"ui button\" ng-class=\"{disabled: Workspace.templateList.length==0}\" ng-click=\"blankSlate()\">Change templates</button>\n        <button class=\"ui right floated button\" ng-click=\"Workspace.isTemplateLoaded()&&navigateTo('#/fields')\" ng-class=\"{disabled: Workspace.templateList.length==0, primary: Workspace.templateList.length>0}\">Continue  <i class=\"long right arrow icon\"></i></button>\n        </div>\n      </div>\n\n\n    </div>"
        })
            .when('/build-tag', {
            controller: 'TagBuilderController',
            template: "\n\n\n    <h1 class=\"ui center aligned header\">\n\n      Tag Builder\n    </h1>\n      <div class=\"ui form\">\n      <div class=\"field\">\n        <label>Tag Label</label>\n        <p>This is the \"good name\" of this field, and will appear on the field list instead of the tag name.</p>\n        <input type=\"text\" ng-blur=\"updateNameFromLabel(data.tagLabel)\" ng-model=\"data.tagLabel\">\n        </div>\n      <div class=\"field\">\n        <label>Tag Name</label>\n        <p>This is the unique ID of the tag you are creating.</p>\n        <input type=\"text\" ng-model=\"data.tagName\">\n        </div>\n      <div class=\"field\">\n        <label>Tag Type</label>\n        <select class=\"ui dropdown\" ng-model=\"data.tagType\">\n        <option ng-repeat=\"item in fieldOptions\" value=\"{{item.value}}\">{{item.label}}</option>\n          </select>\n        </div>\n        <div class=\"ui blue message\" ng-if=\"canAccessParameter('dateFormat')\">\n      <div class=\"dateFormat field\" >\n        <div class=\"header\">Date Format</div>\n        <p>This is how you can specify a date format</p>\n        <div class=\"ui grid\">\n          <div class=\"eight wide column\">\n          <select class=\"ui dropdown\" ng-model=\"data.dateFormat\" ng-if=\"!dateFormat.custom\">\n          <option ng-repeat=\"item in dateFormat.options\" value=\"{{item}}\">{{item}}</option>\n            </select>\n          <input type=\"text\" ng-model=\"data.dateFormat\" ng-if=\"dateFormat.custom\"/>\n          <div class=\"ui checkbox\">\n          <input type=\"checkbox\" ng-model=\"dateFormat.custom\"> <label>Use custom pattern.</label></div>\n          </div>\n          <div class=\"eight wide column\">\n          <strong>Here is a preview:</strong><br>\n          {{ getDatePreview( data.dateFormat) }}\n          </div>\n\n          </div>\n\n\n        </div></div>\n        <div class=\"ui yellow message\" ng-if=\"canAccessParameter('timeFormat')\">\n        <div class=\"timeFormat field\" >\n          <div class=\"header\">Time Format</div>\n          <p>This is how you can specify a time format</p>\n          <div class=\"ui grid\">\n            <div class=\"eight wide column\">\n            <select class=\"ui dropdown\" ng-model=\"data.timeFormat\" ng-if=\"!timeFormat.custom\">\n            <option ng-repeat=\"item in timeFormat.options\" value=\"{{item}}\">{{item}}</option>\n              </select>\n            <input type=\"text\" ng-model=\"data.timeFormat\" ng-if=\"timeFormat.custom\"/>\n            <div class=\"ui checkbox\">\n            <input type=\"checkbox\" ng-model=\"timeFormat.custom\"> <label>Use custom pattern.</label></div>\n            </div>\n            <div class=\"eight wide column\">\n            <strong>Here is a preview:</strong><br>\n            {{ getTimePreview( data.timeFormat) }}\n            </div>\n            </div>\n\n\n\n          </div></div>\n\n          <div class=\"ui message\">\n          <div class=\"header\">Optional Attributes</div><br>\n        <div class=\"field\" ng-if=\"canAccessParameter('length')\">\n          <label>Length</label>\n          <p ng-if=\"data.tagType=='text'\">Setting this field to a numerical value will prevent the user from inputting a text value longer than the specified number of characters.</p>\n          <p ng-if=\"data.tagType=='repeat'\">This will limit the number of items that can be added to a repeating block.</p>\n          <input type=\"text\" ng-model=\"data.tagLength\">\n          </div>\n\n        <div class=\"field\" ng-if=\"canAccessParameter('required')\">\n          <label>Required</label>\n\n          <div class=\"ui checkbox\">\n          <input type=\"checkbox\" ng-model=\"data.tagRequired\">\n          <label>Checking this box makes this field required before the user can export the template.\n          </label>\n          </div>\n          </div>\n\n          <div class=\"field\" ng-if=\"canAccessParameter('instructions')\">\n            <label>Instructions</label>\n            <p>You can provide simple instructions to the user on the field list to further explain what the tag is an how it is used, if necessary.</p>\n            <input type=\"text\" ng-model=\"data.tagInstructions\">\n            </div>\n            </div>\n            <div class=\"field\" ng-show=\"data.tagName\">\n            <label>Rendered Tag</label>\n              <textarea>{{ renderedPreview() }}</textarea>\n              </div>\n            <div >\n\n            </div>\n              <div style=\"height:100px;\"></div>\n        </div>\n        <div class=\"ui fixed container\">\n          <div class=\"ui container\">\n          <button class=\"ui button\" ng-click=\"resetForm()\">Reset</button>\n          </div>\n          </div>\n\n\n\n\n    "
        })
            .when('/fields', {
            template: "\n\n    <h1>Fields</h1>\n    <div class=\"ui form\">\n\n    <div ng-repeat=\"(groupName, groupedFields) in Workspace.allFields track by groupName\" ng-class=\"{'field-group':groupName!=='ungrouped',ungrouped: groupName=='ungrouped'}\">\n      <div class=\"header\">{{groupName}}</div>\n        <div class=\"ui field\" ng-repeat=\"field in groupedFields track by $index\">\n\n          <label>{{field.label ? field.label : field.clean}} <span ng-show=\"field.label.length\">({{field.clean}})</span><span ng-if=\"field.required\">*</span></label>\n          <p ng-if=\"field.instructions\">{{field.instructions}}</p>\n          <tpl-textarea ng-model=\"field.model\" field=\"field\" ng-change=\"field.updateFieldValue(field.model)\" ng-if=\"field.type=='textarea'\"></tpl-textarea>\n          <tpl-textbox ng-model=\"field.model\" field=\"field\" ng-change=\"field.updateFieldValue(field.model)\" ng-if=\"field.type=='text'\"></tpl-textbox>\n          <tpl-url ng-model=\"field.model\" field=\"field\" ng-change=\"field.updateFieldValue(field.model)\" ng-if=\"field.type=='url'\"></tpl-url>\n          <tpl-datetime ng-model=\"field.model\" field=\"field\" ng-change=\"field.updateFieldValue(field.model)\" ng-if=\"field.type=='datetime'\"/></tpl-datetime>\n          <tpl-repeat ng-model=\"field.model\" field=\"field\" ng-change=\"field.updateFieldValue(field.model)\" ng-if=\"field.type=='repeat'\"/></tpl-repeat>\n\n          </div>\n\n        </div>\n        </div>\n      </div><br>\n\n        <div ng-show=\"fields.length>0\" style=\"padding-bottom:3em; padding-top:2em;\">\n        <div class=\"ui horizontal divider\">\n\n    </div>\n\n        </div>\n        <div class=\"ui fixed container\">\n          <div class=\"ui container\">\n            <button class=\"ui button\" ui-popup popup-id=\"import_popup\">\n            <i class=\"folder open icon\"></i> Import field values</button>\n            <div class=\"ui popup\" id=\"import_popup\">\n              <div class=\"header\">Import saved field values</div>\n              <p style=\"padding-top:.5em;\">If you have a field value file (*.JSON), you can drop it in the box below to update the above fields. You can create a field value file on the export page after you've filled out the fields above. </p>\n              <file-dropper label=\"Drop JSON file here\" ondrop=\"Workspace.dropImportFieldValues(evt)\"></file-dropper>\n            </div>\n            <button ng-click=\"Workspace.areAllFieldsCompleted()&&navigateTo('#/export')\" class=\"ui right floated\" ng-class=\"{'disabled button': !Workspace.areAllFieldsCompleted(), 'primary button':Workspace.areAllFieldsCompleted()}\">Review and export <i class=\"long right arrow icon\"></i></button>\n            </div>\n          </div>\n\n\n      "
        })
            .when('/export', {
            template: "\n\n    <h1>Export</h1>\n    <div ng-show=\"Workspace.templateList.length==0\">\n      There are no templates to export.\n      </div>\n    <div ng-show=\"Workspace.templateList.length>0\">\n    <div class=\"ui relaxed divided list\">\n      <div class=\"item\" ng-repeat=\"(key, file) in Workspace.templateList track by $index\">\n      <div class=\"right floated content\">\n\n        <div class=\"ui buttons\">\n          <div class=\"ui button\" ng-click=\"Workspace.exportDownloadSingleFile(file)\">Download</div>\n          <div class=\"ui simple dropdown icon button\">\n            <i class=\"dropdown icon\"></i>\n            <div class=\"menu\">\n\n              <div class=\"item\" ng-click=\"Workspace.exportPreviewHTML(file)\">Open in browser</div>\n              </div>\n            </div>\n          </div>\n      </div>\n\n        <i class=\"large file outline middle aligned icon\"></i>\n        <div class=\"content\">\n          <div class=\"header\">{{file.name}}</div>\n          <div class=\"description\">{{file.size}}B</div>\n        </div>\n      </div>\n\n    <div class=\"item\">\n      <div class=\"right floated content\">\n        <button class=\"ui button\" ng-click=\"Workspace.exportFieldValues()\" >Download</button>\n      </div>\n\n        <i class=\"large text file outline middle aligned icon\"></i>\n        <div class=\"content\">\n          <div class=\"header\">Field values</div>\n          <div class=\"description\"></div>\n        </div>\n      </div>\n    </div>\n<br>\n\n\n\n<div class=\"ui fixed container\">\n  <div class=\"ui container\">\n    <button class=\"ui primary right floated button\" ng-click=\"Workspace.exportAllTemplates()\">\n    <i class=\"download icon\"></i> Download All</button>\n    <button class=\"ui button\" ng-click=\"blankSlate()\">Start over</button>\n      </div>\n    </div>\n  </div>\n\n    "
        }).when('/help', {
            template: "\n    <h1>Help</h1>\n    <p>Variables have changed in the new version of template maker. The new format follows the pattern below:</p>\n\n    <pre>{{ variable_name | type: format }}</pre>\n\n    <p>For example:</p>\n    <pre>{{ webinar_date | date: \"longDate\" }}</pre>\n\n\n    <p>For text fields you can specify long text and regular text boxes:</p>\n    <pre>{{ webinar_title }}\n    {{ webinar_description | textarea }}</pre>\n\n\n    <h2>Date Formats</h2>\n    <p>One cool thing that you can do, is display the date in a more\n    customizable way. What you'll notice immediately is that\n    you can only specify a date in a rigid YYYY-MM-DD format. On the template\n    variable you can specify the month as either the standard date format,\n    or something more unique-- a couple examples:</p>\n    <table class=\"ui table\">\n    <thead><tr><th>Code</th><th>Renders</th></tr></thead>\n    <tr><td><code>{{ webinar_date | date: \"longDate\" }}</code></td><td> September 3, 2010</td></tr>\n    <tr><td><code>{{ webinar_date | date: \"fullDate\" }}</code></td><td> Friday, September 3, 2010</td></tr>\n    <tr><td><code>{{ webinar_date | date: \"MMMM\" }}</code></td><td> September</td></tr>\n    <tr><td><code>{{ webinar_date | date: \"yyyyMMdd\" }}</code></td><td> 20170903</td></tr>\n    </table>\n\n    <h2>Time Formats</h2>\n    <p>You can display times using the time tag:</p>\n\n    <table class=\"ui table\">\n    <thead><tr><th>Code</th><th>Renders</th></tr></thead>\n    <tr><td><code>{{ webinar_time_start | time: \"shortTime\" }}</code></td><td> 2:00 PM</td></tr>\n    <tr><td><code>{{ webinar_time_end | time: \"shortTime+ZZZ\" }}</code></td><td> 2:00 PM EST</td></tr>\n    <tr><td><code>{{ webinar_time_start | time: \"optumTime\" }}</code></td><td> 2:00 p.m.</td></tr>\n    <tr><td><code>{{ webinar_time_end | time: \"optumTime+ZZZ\" }}</code></td><td> 2:00 p.m. EST</td></tr>\n    <tr><td><code>{{ webinar_time_start | time: \"hh:mm\" }}</code></td><td> 2:00</td></tr>\n    <tr><td><code>{{ webinar_time_start | time: \"UTC\" }}</code></td><td> T180000Z <br>UTC adds 4 hours from EST.</td></tr>\n    </table>\n\n\n    <h2>Uriencode</h2>\n    <p>You can easily convert strings to URL safe strings using the uriencode format. This is particularly useful when you want to use a URL or text with special characters as a query string parameter.</p>\n    <pre>{{ webinar_attendee_url | text: uriencode }}</pre>\n\n\n    <h2>Validation</h2>\n    <p>You can add a character count limitation to regular textboxes.</p>\n    <pre>{{ webinar_title | length: 45 }}</pre>\n\n    <p>You can require a field to be filled out using the required parameter.</p>\n    <pre>{{ webinar_title | required }}</pre>\n\n    <p>You can add validation for a url by specifying a url type:</p>\n    <pre>{{ webinar_attendee_url | url }}</pre>\n    <p>These urls will have to be a URL in order for you to export the files.</p>"
        })
            .otherwise({ redirectTo: "/login" });
    }]);
